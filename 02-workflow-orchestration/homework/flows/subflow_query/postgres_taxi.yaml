id: postgres_taxi
namespace: postgres

inputs:
  - id: taxi_type
    type: SELECT
    displayName: "Select Taxi Type Input"
    defaults: green
    values:
      - green
      - yellow

  - id: month
    type: SELECT
    displayName: "Select Year Input"
    defaults: '01'
    values:
      - '01'
      - '02'
      - '03'
      - '04'
      - '05'
      - '06'
      - '07'
      - '08'
      - '09'
      - '10'
      - '11'
      - '12'

  - id: year
    type: SELECT
    displayName: "Select Year Input"
    defaults: '2019'
    values:
      - '2019'
      - '2020'

variables:
  table: "public.{{inputs.taxi_type}}_tripdata"
  staging_table: "public.{{inputs.taxi_type}}_tripdata_staging"
  file: "{{inputs.taxi_type}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  data: "{{outputs.extract.outputFiles[inputs.taxi_type ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

tasks:
  - id: hello
    type: io.kestra.plugin.core.log.Log
    message: Hello World! ðŸš€

  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{vars.file}}"
      taxi_type: "{{inputs.taxi_type}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    description: Extracts file download
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi_type}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process

  - id: if_green
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi_type =='green'}}"
    then:

    - id: green_Create_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Creates a staging table
      fetchType: FETCH
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} 
        (
          unique_row_id TEXT,
          filename TEXT,
          VendorID REAL,
          lpep_pickup_datetime TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag TEXT,
          RatecodeID REAL,
          PULocationID INTEGER,
          DOLocationID INTEGER,
          passenger_count REAL,
          trip_distance REAL,
          fare_amount REAL,
          extra REAL,
          mta_tax REAL,
          tip_amount REAL,
          tolls_amount REAL,
          ehail_fee REAL,
          improvement_surcharge REAL,
          total_amount REAL,
          payment_type REAL,
          trip_type REAL,
          congestion_surcharge REAL
        )

    - id: green_Create_target_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Creates the target table
      fetchType: FETCH
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.table)}} 
        (
          unique_row_id TEXT,
          filename TEXT,
          VendorID REAL,
          lpep_pickup_datetime TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag TEXT,
          RatecodeID REAL,
          PULocationID INTEGER,
          DOLocationID INTEGER,
          passenger_count REAL,
          trip_distance REAL,
          fare_amount REAL,
          extra REAL,
          mta_tax REAL,
          tip_amount REAL,
          tolls_amount REAL,
          ehail_fee REAL,
          improvement_surcharge REAL,
          total_amount REAL,
          payment_type REAL,
          trip_type REAL,
          congestion_surcharge REAL
        )

    - id: green_Truncate_staging
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Truncates staging table before load
      fetchType: FETCH
      sql: |
        TRUNCATE TABLE {{render(vars.staging_table)}}

    - id: green_Load_data_to_staging_table
      type: io.kestra.plugin.jdbc.postgresql.CopyIn
      columns:
        - VendorID
        - lpep_pickup_datetime
        - lpep_dropoff_datetime
        - store_and_fwd_flag
        - RatecodeID
        - PULocationID
        - DOLocationID
        - passenger_count
        - trip_distance
        - fare_amount
        - extra
        - mta_tax
        - tip_amount
        - tolls_amount
        - ehail_fee
        - improvement_surcharge
        - total_amount
        - payment_type
        - trip_type
        - congestion_surcharge
      format: CSV
      from: "{{render(vars.data)}}"
      header: true
      table: "{{render(vars.staging_table)}}"

    - id: green_Update_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Updates the unique row id and filename of the staging table.
      fetchType: FETCH
      sql: |
        UPDATE {{render(vars.staging_table)}}
        SET unique_row_id = md5(
        COALESCE(VendorID::text , ' ')||'-'||
        COALESCE(lpep_pickup_datetime::text, ' ')||'-'||
        COALESCE(lpep_dropoff_datetime::text, ' ')||'-'||
        COALESCE(trip_distance::TEXT, ' ')||'-'||
        COALESCE(fare_amount::TEXT, ' ')
        ),
        filename= '{{render(vars.file)}}'

    - id: green_merge_data
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        MERGE INTO {{render(vars.table)}} AS T
        USING {{render(vars.staging_table)}} AS S
        ON T.unique_row_id = S.unique_row_id
        WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime,
            store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count,
            trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee,
            improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge
          )
          VALUES (
            S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime,
            S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count,
            S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee,
            S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge
          );
  
  - id: if_yellow
    type: io.kestra.plugin.core.flow.If
    condition: "{{ inputs.taxi_type =='yellow'}}"
    then:

    - id: yellow_Create_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Creates a staging table
      fetchType: FETCH
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.staging_table)}} 
        (
          unique_row_id TEXT,
          filename TEXT,
          VendorID REAL,
          tpep_pickup_datetime TIMESTAMP,
          tpep_dropoff_datetime TIMESTAMP,
          passenger_count REAL,
          trip_distance REAL,
          RatecodeID REAL,
          store_and_fwd_flag TEXT,
          PULocationID INTEGER,
          DOLocationID INTEGER,
          payment_type REAL,
          fare_amount REAL,
          extra REAL,
          mta_tax REAL,
          tip_amount REAL,
          tolls_amount REAL,
          improvement_surcharge REAL,
          total_amount REAL,
          congestion_surcharge REAL          
        )

    - id: yellow_Create_target_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Creates the target table
      fetchType: FETCH
      sql: |
        CREATE TABLE IF NOT EXISTS {{render(vars.table)}} 
        (
          unique_row_id TEXT,
          filename TEXT,
          VendorID REAL,
          tpep_pickup_datetime TIMESTAMP,
          tpep_dropoff_datetime TIMESTAMP,
          passenger_count REAL,
          trip_distance REAL,
          RatecodeID REAL,
          store_and_fwd_flag TEXT,
          PULocationID INTEGER,
          DOLocationID INTEGER,
          payment_type REAL,
          fare_amount REAL,
          extra REAL,
          mta_tax REAL,
          tip_amount REAL,
          tolls_amount REAL,
          improvement_surcharge REAL,
          total_amount REAL,
          congestion_surcharge REAL
        )

    - id: yellow_Truncate_staging
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Truncates staging table before load
      fetchType: FETCH
      sql: |
        TRUNCATE TABLE {{render(vars.staging_table)}}

    - id: yellow_Load_data_to_staging_table
      type: io.kestra.plugin.jdbc.postgresql.CopyIn
      columns:
        - VendorID
        - tpep_pickup_datetime
        - tpep_dropoff_datetime
        - passenger_count
        - trip_distance
        - RatecodeID
        - store_and_fwd_flag
        - PULocationID
        - DOLocationID
        - payment_type
        - fare_amount
        - extra
        - mta_tax
        - tip_amount
        - tolls_amount
        - improvement_surcharge
        - total_amount
        - congestion_surcharge
      format: CSV
      from: "{{render(vars.data)}}"
      header: true
      table: "{{render(vars.staging_table)}}"

    - id: yellow_Update_staging_table
      type: io.kestra.plugin.jdbc.postgresql.Queries
      description: Updates the unique row id and filename of the staging table.
      fetchType: FETCH
      sql: |
        UPDATE {{render(vars.staging_table)}}
        SET unique_row_id = md5(
        COALESCE(VendorID::text , ' ')||'-'||
        COALESCE(tpep_pickup_datetime::text, ' ')||'-'||
        COALESCE(tpep_dropoff_datetime::text, ' ')||'-'||
        COALESCE(trip_distance::TEXT, ' ')||'-'||
        COALESCE(fare_amount::TEXT, ' ')
        ),
        filename='{{render(vars.file)}}'

    - id: yellow_merge_data
      type: io.kestra.plugin.jdbc.postgresql.Queries
      sql: |
        MERGE INTO {{render(vars.table)}} AS T
        USING {{render(vars.staging_table)}} AS S
        ON T.unique_row_id = S.unique_row_id
        WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID,           
            tpep_pickup_datetime, tpep_dropoff_datetime,
            passenger_count, trip_distance, RatecodeID,
            store_and_fwd_flag,  PULocationID, DOLocationID,
            payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount,congestion_surcharge
          )
          VALUES (
            S.unique_row_id, S.filename, S.VendorID,           
            S.tpep_pickup_datetime, S.tpep_dropoff_datetime,
            S.passenger_count, S.trip_distance, S.RatecodeID,
            S.store_and_fwd_flag,  S.PULocationID, S.DOLocationID,
            S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount,S.tolls_amount, S.improvement_surcharge, S.total_amount,S.congestion_surcharge
          );


  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: Purge all files related to current execution



pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: jdbc:postgresql://postgres:5432/kestra
      username: kestra
      password: k3str4
      # taskRunner:
      #   type: io.kestra.plugin.scripts.runner.docker.Docker
      #   pullPolicy: NEVER # set it to NEVER to use a local image
      # containerImage: postgres



